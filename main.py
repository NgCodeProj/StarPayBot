# ========================== Imports ==========================
import asyncio
import structlog
import json
from data.config import TRANSACTIONS_FILE, REFUND_USER
from typing import Callable, Dict, Any, Awaitable
from aiogram import F, Router, Bot, Dispatcher, BaseMiddleware
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ========================== Functions ==========================

def load_transactions() -> dict:
    try:
        with open(TRANSACTIONS_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_transactions(data: dict):
    with open(TRANSACTIONS_FILE, "w") as f:
        json.dump(data, f, indent=4)

# ========================== Other ==========================

try:
    from data.config import TOKEN
except ImportError:
    raise RuntimeError("–§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN.")

if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")

logger = structlog.get_logger()

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ========================== Middleware ==========================

class L10nMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        return await handler(event, data)

dp.update.middleware(L10nMiddleware())

# ========================== –†–æ—É—Ç–µ—Ä—ã ==========================

router = Router()

@router.message(Command("donate", "start"))
async def cmd_donate(message: Message):
    builder = InlineKeyboardBuilder()
    amounts = [15, 25, 50, 75, 100, 150, 250, 500, 1000, 2500]
    for amount in amounts:
        builder.button(text=f"{amount} –∑–≤—ë–∑–¥", callback_data=f"donate_{amount}")
    builder.adjust(3, 3, 2, 2)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=builder.as_markup()
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã—Ñ–µ –∫–æ–º–∞–Ω–¥—ã",
        "/start - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–Ω–∞—Ç–∞",
        "/refund - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞",
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("donate_"))
async def process_donation(callback: CallbackQuery):
    amount = int(callback.data.split("_")[1])
    min_units = amount

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á—ë—Ç: {amount} –∑–≤—ë–∑–¥")

    prices = [LabeledPrice(label="XTR", amount=min_units)]

    await callback.message.delete()

    back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")

    payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount}‚≠êÔ∏è", pay=True)],
        [back_button]
    ])

    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞",
        description="–î–æ–Ω–∞—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
        payload=f"{amount}_stars",
        provider_token="",
        currency="XTR",
        prices=prices,
        need_name=False,
        need_email=False,
        need_phone_number=False,
        send_email_to_provider=False,
        send_phone_number_to_provider=False,
        reply_markup=payment_keyboard
    )

    await callback.answer()


@router.callback_query(F.data == "back")
async def go_back_to_start(callback: CallbackQuery):
    await callback.message.delete()

    builder = InlineKeyboardBuilder()
    amounts = [15, 25, 50, 75, 100, 150, 250, 500, 1000, 2500]
    for amount in amounts:
        builder.button(text=f"{amount} –∑–≤–µ–∑–¥", callback_data=f"donate_{amount}")
    builder.adjust(3, 3, 2, 2)

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=builder.as_markup()
    )


@router.message(Command("refund"))
async def cmd_refund(message: Message, bot: Bot, command: CommandObject):
    if message.from_user.id != REFUND_USER:
        await message.answer(
            "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @NG_MNG"
        )
        return

    transaction_id = command.args
    if transaction_id is None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/refund ID</code>, –≥–¥–µ ID ‚Äì –∞–π–¥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n"
            "–ï–≥–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞, –∞ —Ç–∞–∫–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ó–≤—ë–∑–¥—ã' –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram.",
            parse_mode='HTML'
        )
        return

    transactions = load_transactions()
    user_id = transactions.get(transaction_id)

    if not user_id:
        await message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID.")
        return

    try:
        await bot.refund_star_payment(
            user_id=user_id,
            telegram_payment_charge_id=transaction_id
        )
        await bot.send_message(
            chat_id=user_id,
            text="–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω —É—Å–ø–µ—à–Ω–æ. –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∑–≤—ë–∑–¥—ã —É–∂–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞—à —Å—á—ë—Ç –≤ Telegram."
        )
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω —É—Å–ø–µ—à–Ω–æ. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except TelegramBadRequest as error:
        if "CHARGE_NOT_FOUND" in error.message:
            text = "–¢–∞–∫–æ–π –∫–æ–¥ –ø–æ–∫—É–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑."
        elif "CHARGE_ALREADY_REFUNDED" in error.message:
            text = "–ó–∞ —ç—Ç—É –ø–æ–∫—É–ø–∫—É —É–∂–µ —Ä–∞–Ω–µ–µ –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤."
        else:
            text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(text)

@router.pre_checkout_query()
async def on_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def on_successful_payment(message: Message):
    logger.info(
        "–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –¥–æ–Ω–∞—Ç!",
        amount=message.successful_payment.total_amount,
        from_user_id=message.from_user.id,
        user_username=message.from_user.username
    )

    transactions = load_transactions()
    transactions[message.successful_payment.telegram_payment_charge_id] = message.from_user.id
    save_transactions(transactions)

    await message.answer(
        f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç!</b>\n\n"
        f"–í–∞—à –∞–π–¥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{message.successful_payment.telegram_payment_charge_id}</code>\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–æ–∑–≤—Ä–∞—Ç.",
        parse_mode="HTML",
        message_effect_id="5046509860389126442"
    )

@router.message(F.text)
async def handle_unknown_command(message: Message):
    if message.text.startswith(""):
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    else:
        await message.delete()

# ========================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ==========================

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    while True:
        try:
            asyncio.run(main())
            break
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ë–æ—Ç –∑–∞—Å—ã–ø–∞–µ—Ç –Ω–∞ 5 —Å–µ–∫—É–Ω–¥.")
            asyncio.sleep(5)